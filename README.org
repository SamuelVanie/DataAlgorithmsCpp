#+title: Readme


* About this repository

I just built this repository as a revision to my course in data algorithms


* C++

The goal was to create all the datastructures I'd learn with smart pointers. 

** How to compile and execute the test

To compile, you do it as a normal compilation but you will need to add *-lgtest* as a compilation flag

The *google test* package need to be downloaded.


Example of compilation :

#+begin_example
g++ Stack.cpp Stack_test.cpp -o Stack -lgtest
#+end_example

A binary called Stack will be generated.


** Compilation using Makefile

Compilation using makefile is pretty simple.
You should be in the *root location* of the folder.

Then you can run make with *Queue, LinkedList, ...* (whatever you want to compile)

Example : Compile and run Heap tests
#+begin_example
make Heap
#+end_example

** Explanation of smart pointers auto deallocation functions

- Smart pointers are supposed to be deallocated automatically but the size of the stack provoke deallocation issues
with the different data structures because they each them contains reference to an other (the next one).

- You can confirm this behavior by running insertion of multiple data and delete the destructors that I have created.

- The solution to this behavior is to change ownership of all the pointers to a unique one that will be deallocated at the end
of the scope of the destructor function.


* Java

The best language for the market, but I don't like this language.
Still best to practice in the language in which you're gonna be interviewed.


** Compilation/run using javac and java

1. To compile the project run the following command :

   #+begin_src java
javac File.java
   #+end_src

   Because the dependencies JUnit and hamcrest are already in the classpath (see the flake.nix file), you can easily compile with the above command.
   You would use the =-cp= flag is those were not.

2. Run the project with the command :

   #+begin_src java
java org.junit.runner.JUnitCore TestFilePathWithoutTheClassExtension
   #+end_src
